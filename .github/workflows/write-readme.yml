
name: Write-Me Readme

on:
  push:
    paths:
      - 'problems/**'
  workflow_dispatch:
    inputs:
      problem_id:
        description: 'Problem ID (optional, if not provided will auto-detect)'
        required: false
        type: string

jobs:
  detect-problem:
    runs-on: ubuntu-latest
    outputs:
      problem_id: ${{ steps.setid.outputs.problem_id }}
      problem_dir: ${{ steps.setid.outputs.problem_dir }}
      readme_exists: ${{ steps.setid.outputs.readme_exists }}
    steps:
      - uses: actions/checkout@v4
      - id: setid
        run: |
          # Function to check if README exists for a given folder
          check_readme_exists() {
            local folder="$1"
            if [ -f "$folder/README.md" ]; then
              echo "[DEBUG] README.md exists in $folder, skipping generation."
              echo "readme_exists=true" >> $GITHUB_OUTPUT
              return 0
            else
              echo "[DEBUG] README.md does not exist in $folder, will generate."
              echo "readme_exists=false" >> $GITHUB_OUTPUT
              return 1
            fi
          }

          # Function to set output variables
          set_outputs() {
            local problem_id="$1"
            local folder="$2"
            echo "problem_id=$problem_id" >> $GITHUB_OUTPUT
            echo "problem_dir=$folder" >> $GITHUB_OUTPUT
          }

          # Function to find problem folder by ID
          find_problem_folder() {
            local problem_id="$1"
            # Look in all difficulty folders (1-easy, 2-medium, 3-hard)
            find problems -type d -path "problems/[1-3]-*/[0-9]*-*" | grep "/${problem_id}-" | head -n1
          }

          # Function to get changed problem folder from git diff
          get_changed_folder() {
            local diff_range="$1"
            # Get first matching changed file in problems directory
            git diff --name-only $diff_range | grep -E '^problems/[1-3]-[^/]+/[0-9]+-[^/]+/' | head -n1 | awk -F'/' '{print $1"/"$2"/"$3}'
          }

          # Function to extract problem ID from folder path
          extract_problem_id() {
            local folder="$1"
            # Extract problem ID from the third part of path (e.g., "431-Easy-Problem-Name" -> "431")
            echo "$folder" | awk -F'/' '{print $3}' | awk -F'-' '{print $1}'
          }

          # Main logic starts here
          echo "[DEBUG] workflow_dispatch problem_id input: '${{ github.event.inputs.problem_id }}'"

          # Handle manual workflow dispatch with problem_id
          if [ "${{ github.event.inputs.problem_id }}" != "" ]; then
            echo "[DEBUG] Using provided problem_id: '${{ github.event.inputs.problem_id }}'"
            folder=$(find_problem_folder "${{ github.event.inputs.problem_id }}")
            
            if [ -z "$folder" ]; then
              echo "[DEBUG] No folder found for problem_id, skipping."
              set_outputs "${{ github.event.inputs.problem_id }}" ""
              echo "readme_exists=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            check_readme_exists "$folder"
            set_outputs "${{ github.event.inputs.problem_id }}" "$folder"
            exit 0
          fi

          # Auto-detect from git changes
          echo "[DEBUG] No problem_id provided, auto-detecting from git diff."
          if [ -n "${{ github.event.before }}" ]; then
            DIFF_RANGE="${{ github.event.before }} ${{ github.sha }}"
          else
            echo "[DEBUG] github.event.before is empty, using HEAD~1 as fallback."
            DIFF_RANGE="HEAD~1 HEAD"
          fi

          folder=$(get_changed_folder "$DIFF_RANGE")
          echo "[DEBUG] Auto-detected folder: '$folder'"

          if [ -z "$folder" ]; then
            echo "[DEBUG] No changed problem folder found, skipping."
            set_outputs "" ""
            echo "readme_exists=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          problem_id=$(extract_problem_id "$folder")
          echo "[DEBUG] Extracted problem_id: '$problem_id' from folder: '$folder'"

          if [ -z "$problem_id" ]; then
            echo "[DEBUG] Extracted problem_id is empty, skipping."
            set_outputs "" "$folder"
            echo "readme_exists=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          check_readme_exists "$folder"
          set_outputs "$problem_id" "$folder"

  write-me-readme:
    needs: detect-problem
    if: needs.detect-problem.outputs.readme_exists == 'false' && needs.detect-problem.outputs.problem_id != ''
    uses: zzl0626/repo-goalie/.github/workflows/write-me.yml@main
    with:
      problem_id: ${{ needs.detect-problem.outputs.problem_id }}
    secrets:
      PAT_GITHUB: ${{ secrets.PAT_LINGC2001 }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}