name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  update-progress:
    runs-on: ubuntu-latest
    if: >-
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      (contains(join(github.event.commits.*.added, '\n'), 'problems/') || contains(join(github.event.commits.*.modified, '\n'), 'problems/') || contains(join(github.event.commits.*.removed, '\n'), 'problems/'))
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Generate dashboard charts
        run: python3 dashboard/scripts/generate_progress.py
      - name: Commit dashboard updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if [ -n "$(git status --porcelain)" ]; then
            git add dashboard/assets/
            git commit -m "docs(dashboard): update dashboard charts"
            git push
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_LINGC2001 }}
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: curl -Ls https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: uv sync

      - name: Run Ruff Lint and Format
        run: |
          # Run ruff check with --fix and --unsafe-fixes
          uv run ruff check --fix --unsafe-fixes
          # Run ruff format
          uv run ruff format

      - name: Auto-commit ruff changes
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are any changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "Files were modified by ruff. Committing fixes directly to current branch..."
            
            # Add and commit changes directly to current branch
            git add .
            git commit -m "fix(lint): ruff lint and format" \
                       -m "This commit contains automatic fixes applied by:" \
                       -m "- uv run ruff check --fix" \
                       -m "- uv run ruff format" \
                       -m "" \
                       -m "Generated by GitHub Actions on $(date)"
            
            # Push directly to the current branch
            git push origin HEAD
            
            echo "✅ Committed ruff fixes directly to branch: ${GITHUB_REF#refs/heads/}"
          else
            echo "✅ No files were modified by ruff."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_LINGC2001 }}

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: curl -Ls https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: uv sync

      - name: Run tests
        run: uv run pytest

write-me-readme:
  if: >-
    github.event_name == 'push' &&
    github.ref == 'refs/heads/main' &&
    (
      contains(join(github.event.commits.*.added, '\n'), 'problems/') ||
      contains(join(github.event.commits.*.modified, '\n'), 'problems/') ||
      contains(join(github.event.commits.*.removed, '\n'), 'problems/')
    )
  runs-on: ubuntu-latest
  steps:
    - name: Find first problem directory needing README
      id: find_dir
      run: |
        set -e
        files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^problems/' || true)
        for f in $files; do
          dir=$(dirname "$f")
          if [ ! -f "$dir/README.md" ]; then
            echo "problem_id=$dir" >> $GITHUB_OUTPUT
            exit 0
          fi
        done
    - name: Call Write-Me Readme reusable workflow
      if: steps.find_dir.outputs.problem_id != ''
      uses: zzl0626/repo-goalie/.github/workflows/write-me.yml@main
      with:
        problem_id: ${{ steps.find_dir.outputs.problem_id }}
      secrets:
        PAT_GITHUB: ${{ secrets.PAT_LINGC2001 }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
